{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajayg\\\\Desktop\\\\react-weather-app-master\\\\react-weather-app-master\\\\src\\\\components\\\\weather\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./Weather.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Weather = () => {\n  _s();\n\n  let today = new Date();\n  let date = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(true);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [dateToday, setDateToday] = useState(date);\n  const api = {\n    url: \"http://api.openweathermap.org/data/2.5/\",\n    key: \"28fd15358cdecbc1a1dfef367e71acef\"\n  };\n  const iconURL = \"http://openweathermap.org/img/w/\";\n\n  const getInput = e => {\n    setInput(e.target.value);\n  };\n\n  const getWeatherData = e => {\n    if (e.key === \"Enter\" && input === \"\") {\n      setErrorMsg(\"Input cannot be empty\");\n      setError(true);\n    }\n\n    if (e.key === \"Enter\" && input !== \"\") {\n      setIsLoading(true);\n      setError(true);\n      fetch(`${api.url}weather?q=${input}&units=metric&APPID=${api.key}`).then(res => {\n        if (!res.ok) {\n          throw Error(\"Failed to Fetch Data\");\n        }\n\n        return res.json();\n      }).then(data => {\n        console.log(data);\n        setWeather(data);\n        setInput(\"\");\n        setError(false);\n        setIsLoading(false);\n      }).catch(err => {\n        console.log(err.message);\n        setError(true);\n        setErrorMsg(err.message);\n        setIsLoading(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"--100vh --center-all\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container weather --flex-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-app --text-light\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Weather App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: dateToday\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"--form-control --my2\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search city name\",\n            onChange: getInput,\n            value: input,\n            onKeyPress: getWeatherData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: errorMsg != \"\" ? \"error\" : \"\",\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result --card --my2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [weather.name, \", \", weather.sys.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"icon\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: iconURL + weather.weather[0].icon + \".png\",\n              alt: weather.weather[0].main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temp: \", Math.round(weather.main.temp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Weather: \", weather.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temp Range: \", Math.round(weather.main.temp_min), \"\\xB0C /\", \" \", Math.round(weather.main.temp_max), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"kYmdA4sX2Y5rECagExy2PG7T/5I=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/Users/ajayg/Desktop/react-weather-app-master/react-weather-app-master/src/components/weather/Weather.js"],"names":["useState","Weather","today","Date","date","getFullYear","getMonth","getDate","input","setInput","weather","setWeather","isLoading","setIsLoading","error","setError","errorMsg","setErrorMsg","dateToday","setDateToday","api","url","key","iconURL","getInput","e","target","value","getWeatherData","fetch","then","res","ok","Error","json","data","console","log","catch","err","message","name","sys","country","icon","main","Math","round","temp","temp_min","temp_max"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./Weather.scss\";\n\nconst Weather = () => {\n  let today = new Date();\n  let date =\n    today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n\n  const [input, setInput] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(true);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n\n  const [dateToday, setDateToday] = useState(date);\n\n  const api = {\n    url: \"http://api.openweathermap.org/data/2.5/\",\n    key: \"28fd15358cdecbc1a1dfef367e71acef\",\n  };\n  const iconURL = \"http://openweathermap.org/img/w/\";\n\n  const getInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const getWeatherData = (e) => {\n    if (e.key === \"Enter\" && input === \"\") {\n      setErrorMsg(\"Input cannot be empty\");\n      setError(true);\n    }\n    if (e.key === \"Enter\" && input !== \"\") {\n      setIsLoading(true);\n      setError(true);\n      fetch(`${api.url}weather?q=${input}&units=metric&APPID=${api.key}`)\n        .then((res) => {\n          if (!res.ok) {\n            throw Error(\"Failed to Fetch Data\");\n          }\n          return res.json();\n        })\n        .then((data) => {\n          console.log(data);\n          setWeather(data);\n          setInput(\"\");\n          setError(false);\n          setIsLoading(false);\n        })\n        .catch((err) => {\n          console.log(err.message);\n          setError(true);\n          setErrorMsg(err.message);\n          setIsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <section className=\"--100vh --center-all\">\n      <div className=\"container weather --flex-center\">\n        <div className=\"weather-app --text-light\">\n          <h1>Weather App</h1>\n          <p>{dateToday}</p>\n          <div className=\"--form-control --my2\">\n            <input\n              type=\"text\"\n              placeholder=\"Search city name\"\n              onChange={getInput}\n              value={input}\n              onKeyPress={getWeatherData}\n            />\n          </div>\n          {error ? (\n            <p className={errorMsg != \"\" ? \"error\" : \"\"}>{errorMsg}</p>\n          ) : (\n            <div className=\"result --card --my2\">\n              <h2>\n                {weather.name}, {weather.sys.country}\n              </h2>\n              <div className=\"icon\">\n                <img\n                  src={iconURL + weather.weather[0].icon + \".png\"}\n                  alt={weather.weather[0].main}\n                />\n              </div>\n              <p>Temp: {Math.round(weather.main.temp)}°C</p>\n              <p>Weather: {weather.weather[0].main}</p>\n              <p>\n                Temp Range: {Math.round(weather.main.temp_min)}°C /{\" \"}\n                {Math.round(weather.main.temp_max)}°C\n              </p>\n            </div>\n          )}\n          {isLoading && <h3>Loading...</h3>}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}